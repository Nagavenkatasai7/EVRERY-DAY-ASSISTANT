[pytest]
# Comprehensive Pytest Configuration for AI Research Assistant
# Covers: Document Processing, RAG System, Social Media, Resume Maker

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.9

# Test directories
testpaths = tests

# Output options with coverage for all modules
addopts =
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    --color=yes
    -ra
    --cov=src
    --cov=config
    --cov=utils
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=70
    --maxfail=10
    --asyncio-mode=auto
    -n auto

# Comprehensive markers for all features
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests simulating complete user workflows
    slow: Tests that take longer than 1 second
    pdf: Tests related to PDF processing
    rag: Tests related to RAG system and embeddings
    chat: Tests related to chat functionality
    social_media: Tests related to social media automation
    resume: Tests related to resume maker feature
    api: Tests that call real APIs (should be mocked in CI)
    requires_anthropic: Tests requiring Anthropic API key
    requires_grok: Tests requiring Grok API key
    requires_tavily: Tests requiring Tavily API key
    requires_twitter: Tests requiring Twitter API credentials
    requires_linkedin: Tests requiring LinkedIn API credentials
    requires_perplexity: Tests requiring Perplexity API key
    smoke: Quick smoke tests for critical paths
    security: Security-related tests (OAuth, encryption, etc.)
    performance: Performance and load tests
    mock: Tests using mocks instead of real APIs

# Asyncio configuration
asyncio_mode = auto

# Warnings filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    ignore::RuntimeWarning:streamlit
    ignore::UserWarning:langchain

# Coverage configuration
[coverage:run]
source = src,config,utils
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */.pytest_cache/*
    */__init__.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

[coverage:html]
directory = htmlcov
